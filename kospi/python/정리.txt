< 기능 >
 웹소켓(알림, 채팅, 주가) - 주가 예측 결과에 따른 실시간 알림, 사용자 간 증권 정보 공유용 실시간 채팅, 키움증권 REST API로 실시간 KOSPI 불러오기
 뉴스 감성 분석 - KOBERT, LSTM_NEWS 모델을 통해 뉴스 긍정/부정/중립 분석
 주가 예측 모델 - LSTM_KOSPI, Linear Regression 모델로 내일 KOSPI 지수 예측

< 기술 스택 >
 백엔드 : Java(JSP), Python(Flask), WebSocket, MySQL
 머신러닝 : PyTorch 기반 KOBERT, LSTM
 프론드엔트 : HTML/CSS, jQuery, JSP
 API : 키움증권 REST API

< 웹소켓 > 
 웹소켓이란? (프로젝트 기준)
  - 클라이언트(브라우저)와 서버 간 양방향 통신이 가능한 프로토콜
  - 기존의 HTTP는 클라이언트가 요청할 때만 서버가 응답했지만, 웹소켓은 연결이 한 번 맺어지면 서버가 언제든지 클라이언트에게 데이터를 전송

 현재 프로젝트에 웹소켓을 사용한 이유
  서버-클라이언트 간 지속적인 연결 유지 필요
   - HTTP는 요청-응답 후 연결이 끊기므로 이런 상시 대기 구조에 적합하지 않음
        -> 웹소켓은 한 번 연결되면 계속 유지되므로 실시간 시스템에 적합
   - 알림 : 사용자가 매번 내일의 예측 결과가 뭐냐고 직접 요청하지는 않기 때문에 웹소켓을 사용해서 서버가 자동으로 예측 정보를 사용자에게 전송하는 구조로 제작 (Python -> Javascript -> JSP)
   - 채팅 : 양방향 통신과 실시간 전송이 필요 (브라우저 <-> Python 서버)
   - 차트 : 키움 웹소켓에 연결 -> 주가 데이터를 차트로 반영 및 DB에 저장
    
< 뉴스 감성 분석 >
 1. LSTM 기반 감성분석 모델 
    
    모델 구현
    - 금융 뉴스 데이터셋을 이용해 LSTM 모델 구성
    - 전처리 방식 
        · keras의 Tokenizer으로 텍스트를 정수로 변환
        · pad_sequences를 이용해 길이 100으로 패딩 처리(100을 기준으로 자르거나 여백 채우기)
    
    목적
    - 감성 라벨을 학습해 뉴스 텍스트를 분류하는 LSTM 모델 설계
    - 단어 순서에 민감한 뉴스 문장에서 해당 모델을 사용했을 때 감성분석 결과가 어떠한지

    장점
    - 딥러닝에 대한 이해도 상승..ㅎ

    한계
    - 복합적인 문장이 들어가는 금융 뉴스에 적합하지 않음 ("실적 호조에도 불구하고 하락세")
    - 금융 용어("공매도", "상한가", "실적 발표")에 대한 이해도 낮음

 2. HuggingFace에서 제공하는 고성능 NLP 모델 KOBERT(KorFinBERT) 활용

    선택 이유
    - KorFinBERT는 금융 뉴스로 사전학습된 언어 모델이기에 LSTM의 한계를 보완할 수 있음
        -> 문맥, 문장 구조, 금융 용어에 강함
    
    활용 방법
    - PyTorch 기반의 모델이기 때문에 현재 프로젝트에서 사용하고 있는 TensorFlow 형식으로 변환
    - BertTokenizer : 사전학습된 토크나이저 불러오기
    - TFBertForSequenceClassification : 사전학습된 모델 불러오기

    효과
    - 길이가 길고 복잡한 뉴스에서도 감성 예측 정확도 향상
